---
# Source: retroboard-api/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: retroboard-api
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: retroboard-api/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: retroboard-api-job-watcher
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch"]
---
# Source: retroboard-api/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: retroboard-api-job-watcher
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: retroboard-api
  namespace: dev-retroboard-api
roleRef:
  kind: Role
  name: retroboard-api-job-watcher
  apiGroup: rbac.authorization.k8s.io
---
# Source: retroboard-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: retroboard-api
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
---
# Source: retroboard-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: retroboard-api
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: retroboard-api
      app.kubernetes.io/instance: retroboard-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: retroboard-api
        app.kubernetes.io/instance: retroboard-api
    spec:
      serviceAccountName: retroboard-api
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-migration
          image: gitea.zengarden.space/zengarden-space/external-images/alpine-k8s:1.31.13
          command:
            - /bin/bash
            - -c
            - |
              set -eoux pipefail 
              echo "Waiting for migration job to complete..."
              kubectl wait --for=condition=complete job/retroboard-api-migration-main-79f2ed8 --timeout=300s
              echo "Migration job completed successfully"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
      containers:
        - name: retroboard-api
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "gitea.zengarden.space/zengarden-space/retroboard-api:main-79f2ed8"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: "CORS_ORIGIN"
              value: "https://retroboard.dev.zengarden.space"
            - name: "DB_HOST"
              value: "retroboard-api-postgresql"
            - name: "DB_NAME"
              value: "postgres"
            - name: "DB_PORT"
              value: "5432"
            - name: "DB_USER"
              value: "retroboard"
          envFrom:
            - secretRef:
                name: retroboard-api-config
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - retroboard-api
              topologyKey: kubernetes.io/hostname
            weight: 100
---
# Source: retroboard-api/templates/migration-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: retroboard-api-migration-main-79f2ed8
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: migration
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: retroboard-api
        app.kubernetes.io/instance: retroboard-api
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      serviceAccountName: retroboard-api
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-db
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: gitea.zengarden.space/zengarden-space/external-images/postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h retroboard-api-postgresql -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: retroboard-api-postgresql
                  key: postgres-password
      containers:
        - name: migration
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "gitea.zengarden.space/zengarden-space/retroboard-api:main-79f2ed8"
          imagePullPolicy: IfNotPresent
          command: ["node", "dist/scripts/migrate.js", "up"]
          env:
            - name: DB_HOST
              value: retroboard-api-postgresql
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: retroboard
            - name: DB_USER
              value: postgres
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: retroboard-api-postgresql
                  key: postgres-password
            - name: NODE_ENV
              value: "production"
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
  backoffLimit: 3
---
# Source: retroboard-api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: retroboard-api
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: external
  rules:
    - host: "retroboard.dev.zengarden.space"
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: retroboard-api
                port:
                  number: 80
---
# Source: retroboard-api/templates/psql-cluster.yaml
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: retroboard-db
spec:
  instances: 1
  storage:
    size: 20Gi
---
# Source: retroboard-api/templates/environments-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: retroboard-api-config
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: secrets
    kind: ClusterSecretStore
  target:
    name: retroboard-api-config
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: retroboard-api
---
# Source: retroboard-api/templates/postgres-password.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: retroboard-api-db-secret
  labels:
    helm.sh/chart: retroboard-api-0.1.0
    app.kubernetes.io/name: retroboard-api
    app.kubernetes.io/instance: retroboard-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: secrets
    kind: ClusterSecretStore
  target:
    name: retroboard-api-postgresql
    creationPolicy: Owner
  dataFrom:
    - extract:
        key:  retroboard-api-postgres
---
# Source: retroboard-api/templates/service-monitor.yaml
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMServiceScrape
metadata:
  name: retroboard-api
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: retroboard-api
      app.kubernetes.io/instance: retroboard-api
  endpoints:
    - port: http
      interval: 15s
      path: /metrics
      scrapeTimeout: 10s
